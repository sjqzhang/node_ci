{
  "name": "download",
  "version": "4.0.1",
  "description": "Download and extract files effortlessly",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/kevva/download"
  },
  "author": {
    "name": "Kevin Mårtensson",
    "email": "kevinmartensson@gmail.com",
    "url": "https://github.com/kevva"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "bin": {
    "download": "cli.js"
  },
  "scripts": {
    "test": "node test/test.js"
  },
  "files": [
    "cli.js",
    "index.js"
  ],
  "keywords": [
    "download",
    "extract",
    "http",
    "request",
    "url"
  ],
  "dependencies": {
    "concat-stream": "^1.4.6",
    "each-async": "^1.0.0",
    "get-stdin": "^4.0.1",
    "got": "^2.3.2",
    "gulp-decompress": "^1.0.2",
    "gulp-rename": "^1.2.0",
    "meow": "^3.0.0",
    "stream-combiner2": "^1.0.2",
    "through2": "^0.6.1",
    "url-regex": "^2.0.2",
    "vinyl": "^0.4.3",
    "vinyl-fs": "^0.3.7"
  },
  "devDependencies": {
    "ava": "^0.0.4",
    "nock": "^0.57.0",
    "rimraf": "^2.2.8"
  },
  "readme": "# download [![Build Status](http://img.shields.io/travis/kevva/download.svg?style=flat)](https://travis-ci.org/kevva/download)\n\n> Download and extract files effortlessly\n\n## Install\n\n```sh\n$ npm install --save download\n```\n\n## Usage\n\nIf you're fetching an archive you can set `extract: true` in options and\nit'll extract it for you.\n\n```js\nvar Download = require('download');\n\nvar download = new Download({extract: true, strip: 1, mode: '755'})\n\t.get('http://example.com/foo.zip')\n\t.get('http://example.com/cat.jpg')\n\t.dest('dest');\n\ndownload.run(function (err, files) {\n\tif (err) {\n\t\tthrow err;\n\t}\n\n\tconsole.log('File downloaded successfully!');\n});\n```\n\n## API\n\n### new Download(opts)\n\nCreates a new `Download` instance.\n\n#### opts.extract\n\nType: `Boolean`  \nDefault: `false`\n\nIf set to `true`, try extracting the file using [decompress](https://github.com/kevva/decompress/).\n\n#### opts.mode\n\nType: `String`  \n\nSet mode on the downloaded file, i.e `{mode: '755'}`.\n\n#### opts.strip\n\nType: `Number`  \nDefault: `0`\n\nEquivalent to `--strip-components` for tar.\n\n### .get(url, [dest])\n\n#### url\n\nType: `String`\n\nAdd a URL to download.\n\n#### dest\n\nType: `String`\n\nSet an optional destination folder that will take precedence over the one set in \n`.dest()`.\n\n### .dest(dir)\n\n#### dir\n\nType: `String`\n\nSet the destination folder to where your files will be downloaded.\n\n### .rename(name)\n\n#### name\n\nType: `Function|String`\n\nRename your files using [gulp-rename](https://github.com/hparra/gulp-rename).\n\n### .run(cb)\n\n#### cb(err, files)\n\nType: `Function`\n\nThe callback will return an array of vinyl files.\n\n## CLI\n\n```bash\n$ npm install --global download\n```\n\n```sh\n$ download --help\n\nUsage\n  download <url>\n  download <url> > <file>\n  download --out <directory> <url>\n  cat <file> | download --out <directory>\n\nExample\n  download http://foo.com/file.zip\n  download http://foo.com/cat.png > dog.png\n  download --extract --strip 1 --out dest http://foo.com/file.zip\n  cat urls.txt | download --out dest\n\nOptions\n  -e, --extract           Try decompressing the file\n  -o, --out               Where to place the downloaded files\n  -s, --strip <number>    Strip leading paths from file names on extraction\n```\n\n## License\n\nMIT © [Kevin Mårtensson](http://kevinmartensson.com)\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/kevva/download/issues"
  },
  "homepage": "https://github.com/kevva/download",
  "_id": "download@4.0.1",
  "_from": "download@"
}
